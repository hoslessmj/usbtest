#include "husbdeviceoperator.h"
#include <unistd.h>
#include "husb.h"
#include <pthread.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "hTools.h"





#define READ_SIZE 65536
#define READ_SPEED 15



typedef struct  _pack_head
{
    unsigned char   flags1;
    unsigned char   flags2;
    unsigned char   fr_hight;
    unsigned char   fr_low;
    unsigned char   fr_ch;
    unsigned char   flags3;
    unsigned char   flags4;
    unsigned char   flags5;
}PACK_HEAD;
typedef struct  _pack
{
    unsigned int    count;
    unsigned int    offset[1024];
}PACK;
typedef struct
{
    FTDIStreamCallback* callback;
    void     *userdata;
    int      packetsize;
    int      activity;
    int      result;
    FTDIProgressInfo    progress;
}FTDIStreamState;

int                 g_all_size = 0;
hUsbDeviceOperator* g_device;
libusb_transfer*    g_transfer;
hElapsedTimer       g_update_timer;




typedef unsigned long long ui64;

typedef int (hRC)(uint8_t *buffer, int length,
                                 FTDIProgressInfo *progress, void *userdata);





static  void    h_readstream_cb(struct  libusb_transfer*    transfer)
{
    typedef struct  _head
    {
        unsigned    char    flags;
        unsigned    char    flags2;
        unsigned    char    fr_hight;
        unsigned    char    fr_low;
        unsigned    char    fr_ch;
        unsigned    char    bl3;
        unsigned    char    bl2;
        unsigned    char    bl;
    }HEAD;



    static  unsigned char*  cbuf = (unsigned char*)malloc(65536);
    int     s_asize = 0;
    PACK           m_data;
    m_data.count = 0;
    if(transfer->status == LIBUSB_TRANSFER_COMPLETED && transfer->actual_length >512){
        g_all_size += transfer->actual_length;
        int numpack = (transfer->actual_length + 512 - 1) / 512;
        for(int x=0;x < numpack;++x){
            memcpy(cbuf + x * 510,transfer->buffer + x * 512 + 2,510);
            s_asize += 510;
        }
        for(int x=0;x < s_asize;++x){
            if(cbuf[x] == 0xFF && cbuf[x + 1] == 0x00 && cbuf[x + 4] < 4){
                if(x + 536 > s_asize)
                    break;
                m_data.offset[m_data.count++]=x;
                x+=535;
            }
        }
        if(m_data.count>1)
            m_data.count-=1;
        for(int x=0;x < m_data.count;++x){
            HEAD*   head = (HEAD*)(cbuf + m_data.offset[x]);
            int         ch = head->fr_ch;
            int         fr  = head->fr_hight << 8 | head->fr_low;
//            printf("ch = %d fr = %d\n",ch,fr);
//            fflush(stdout);
            unsigned  char  *y,*u,*v,*puv;
            unsigned  char  *cy,*cu,*cv,*cuv;
            unsigned  char  *dbuf = (unsigned char*)(cbuf + m_data.offset[x] + 8);
            hCamer*     camer= g_device->ch_data(ch);
            cy = camer->m_y + fr * 352;
            cu = camer->m_u + (fr/2) * 176;
            cv = camer->m_v + (fr/2) * 176;
            hAllCamer*  ac   = (hAllCamer*)g_device->all_camer();
            if(ch == 0){
                y = ac->m_y + fr * 704;
                u = ac->m_u + (fr / 2) * 352;
                v = ac->m_v + (fr / 2) * 352;
            }else if(ch == 1){
                y = ac->m_y + (fr * 704) + 352;
                u = ac->m_u + (fr / 2 * 352)   + 176;
                v = ac->m_v + (fr / 2 * 352)   + 176;
            }else if(ch == 2){
                y = ac->m_y + (288 * 704) + fr * 704;
                u = ac->m_u + (144 * 352) + (fr/2) * 352;
                v = ac->m_v + (144 * 352) + (fr/2) * 352;
            }else if(ch == 3){
                y = ac->m_y + ((288 * 704) + fr * 704) + 352;
                u = ac->m_u + ((144 * 352) + (fr/2) * 352) +176;
                v = ac->m_v + ((144 * 352) + (fr/2) * 352) +176;
            }
            puv = fr % 2 ? v : u;
            cuv = fr % 2 ? cv: cu;
            for(int sy = 0;sy < 44;++sy){
                *y++ = *(dbuf + sy * 12);
                *y++ = *(dbuf + sy * 12 + 1);
                *y++ = *(dbuf + sy * 12 + 2);
                *y++ = *(dbuf + sy * 12 + 3);
                *puv++=*(dbuf + sy * 12 + 4);
                *puv++=*(dbuf + sy * 12 + 5);
                *puv++=*(dbuf + sy * 12 + 6);
                *puv++=*(dbuf + sy * 12 + 7);
                *y++ = *(dbuf + sy * 12 + 8);
                *y++ = *(dbuf + sy * 12 + 9);
                *y++ = *(dbuf + sy * 12 + 10);
                *y++ = *(dbuf + sy * 12 + 11);


                *cy++ = *(dbuf + sy * 12);
                *cy++ = *(dbuf + sy * 12 + 1);
                *cy++ = *(dbuf + sy * 12 + 2);
                *cy++ = *(dbuf + sy * 12 + 3);
                *cuv++= *(dbuf + sy * 12 + 4);
                *cuv++= *(dbuf + sy * 12 + 5);
                *cuv++= *(dbuf + sy * 12 + 6);
                *cuv++= *(dbuf + sy * 12 + 7);

                *cy++ = *(dbuf + sy * 12 + 8);
                *cy++ = *(dbuf + sy * 12 + 9);
                *cy++ = *(dbuf + sy * 12 + 10);
                *cy++ = *(dbuf + sy * 12 + 11);
            }
        }
    }
}


static  double  TimevalDiff(const struct timeval* a,const struct timeval* b)
{
    return  (a->tv_sec - b->tv_sec) + 1e-6 * (a->tv_usec - b->tv_usec);
}

int     h_readstream(struct ftdi_context*   ftdi,hRC cb,void* userdata,int packper,int numTransfers)
{


}


void    rethread_read(void*   p)
{
    LOGE("rethread_read thread !!!!!!!!!!!!!!!\n");

    hUsbDeviceOperator* m_device = (hUsbDeviceOperator*)p;
    m_device->m_ftdi->m_usb->join();
    m_device->m_ftdi->ftdi_stream_restart(h_readstream_cb,128);
    LOGE("thread read error!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
}



void    thread_read(void*   p)
{
    hUsbDeviceOperator* m_device = (hUsbDeviceOperator*)p;
    if(m_device->m_ftdi->ftdi_set_bitmode(0xFF,BITMODE_RESET)<0){
        LOGE("can't reset mode\n");

        return  ;
    }
    m_device->m_ftdi->ftdi_usb_purge_tx_buffer();
    m_device->m_ftdi->ftdi_usb_purge_rx_buffer();

    if(m_device->m_ftdi->ftdi_set_bitmode(0xFF,BITMODE_SYNCFF)<0){
        LOGE("Can't set synchronous fifo mode\n");

        return;
    }
    m_device->m_ftdi->m_usb->join();
    m_device->m_ftdi->ftdi_stream_start(h_readstream_cb,128);
    LOGE("thread read error!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
}


hUsbDeviceOperator::hUsbDeviceOperator()
{
    init();
}





bool hUsbDeviceOperator::init()
{
    m_read_data_thread_isrun = false;
    m_work_data_thread_isrun = false;
    m_device_disconnect      = false;
    m_camers[0] = new hRightCamer();
    m_camers[1] = new hFrontCamer();
    m_camers[2] = new hBackCamer();
    m_camers[3] = new hLeftCamer();
    m_ac        = new hAllCamer();
    for(int x=0;x < 4;++x){
        m_camers[x]->init();
        m_camers[x]->create_helper();
    }
    hCamerarchive::load("Front",m_camers[1]);
    hCamerarchive::load("Back",m_camers[2]);
    hCamerarchive::load("Left",m_camers[3]);
    hCamerarchive::load("Right",m_camers[0]);
    m_camers[1]->m_pp.x = 5;
    m_camers[1]->m_pp.y = 0;
    m_camers[3]->m_pp.x = m_camers[1]->m_pp.x-1;
    m_camers[3]->m_pp.y = m_camers[1]->m_pp.y + 25;
    m_camers[0]->m_pp.x = m_camers[1]->m_pp.x + 232;
    m_camers[0]->m_pp.y = m_camers[1]->m_pp.y + 30;
    m_camers[2]->m_pp.x = m_camers[1]->m_pp.x;
    m_camers[2]->m_pp.y = m_camers[1]->m_pp.y + 350;
    m_camers[0]->m_isclip = m_camers[1]->m_isclip = m_camers[2]->m_isclip = m_camers[3]->m_isclip = true;

    m_ac->init();
    m_ac->create_helper();
    m_ftdi = new hftdi();
    pthread_cond_init(&m_cond,NULL);
    return true;
}


bool hUsbDeviceOperator::open_device()
{
    if(m_ftdi->ftdi_usb_open()){
        LOGE("open device error\n");

        return  false;
    }

    m_ftdi->ftdi_set_bitmode(0xFF,0x40);
    if(0 != m_ftdi->ftdi_set_latency_timer(READ_SPEED)){
        return  false;
    }
    if(0 != m_ftdi->ftdi_setflowctrl(SIO_RTS_CTS_HS)){
        return  false;
    }

    if(!hwrite(0x20,0x00,0x00))
        return false;
    if(!hwrite(0x20,0x00,0x10))
        return false;
    if(!hwrite(0x20,0x00,0x10))
        return false;
    if(!hwrite(0x21,0x30,0x00))
        return false;
    if(!hwrite(0x2c,0xff,0x04))
        return false;
    if(!hwrite(0x2d,0xfd,0x00))
        return false;
    if(!hwrite(0x2c,0x80,0x31))
        return false;
    if(!hwrite(0x20,0x32,0x00))
        return false;
    if(!hwrite(0x20,0x32,0x01))
        return false;
    return true;
}
void hUsbDeviceOperator::start_dsp_chanel(int ch)
{
    unsigned char _ch = ch;
    hwrite(0x2c,0xff,_ch);
    hwrite(0x2c,0x05,0x00);
    hwrite(0x2c,0x57,0x20);
    hwrite(0x2c,0x4f,0x08);
    hwrite(0x2c,0x5c,0x30);
    hwrite(0x2c,0x5d,0x58);
    hwrite(0x2c,0x5e,0x00);
    hwrite(0x2c,0x56,0x03);
    hwrite(0x2c,0x05,0x08);
    hwrite(0x2c,0x09,0x88);
    hwrite(0x2c,0x0e,0xb8);
    hwrite(0x2c,0x11,0x03);
    hwrite(0x2c,0x1c,0xff);
    hwrite(0x2c,0x1d,0x00);
    hwrite(0x2c,0x2c,0x60);
    hwrite(0x2c,0X2F,0X14);
    hwrite(0x2c,0X31,0XA5);
    hwrite(0x2c,0x32,0xff);
    hwrite(0x2c,0x36,0x31);
    hwrite(0x2c,0x37,0x11);
    hwrite(0x2c,0x38,0x7E);
    hwrite(0x2c,0x39,0x04);
    hwrite(0x2c,0x4d,0x13);
    hwrite(0x2c,0x5e,0x80);
    hwrite(0x2c,0x61,0x72);
    hwrite(0x2c,0x64,0xff);
    hwrite(0x2c,0x65,0x30);
    hwrite(0x2c,0x66,0x0);
    hwrite(0x2c,0x67,0xf0);
    hwrite(0x2c,0x07,0x22);
    hwrite(0x2c,0x23,0x17);
    hwrite(0x2c,0x24,0x37);
    hwrite(0x2c,0x25,0x18);
    hwrite(0x2c,0x26,0x38);
    hwrite(0x2c,0x20,0xa4);
    hwrite(0x2c,0x21,0x46);
    hwrite(0x2c,0x28,0xf2);
    hwrite(0x2c,0x50,0x00);
    hwrite(0x2c,0x1a,0x83);
    hwrite(0x2c,0x27,0xe0);
    hwrite(0x2c,0x63,0x09);
    hwrite(0x2c,0x3a,0x28);
    hwrite(0x2c,0x3b,0x10);
    hwrite(0x2c,0x3c,0x80);
    hwrite(0x2c,0x3d,0x80);
    if(ch == 0){
        hwrite(0x2c,0x3f,0x20);
    }else if(ch == 1){
        hwrite(0x2c,0x3f,0x21);
    }else if(ch == 2){
        hwrite(0x2c,0x3f,0x22);
    }else if(ch == 3){
        hwrite(0x2c,0x3f,0x23);
    }


}
void hUsbDeviceOperator::start_dsp()
{
    hwrite(0x20,0x00,0x10);
    hwrite(0x20,0x00,0x00);
    hwrite(0x20,0x00,0x10);
    hwrite(0x2c,0xd9,0xe0); //yici jiu hao
    for(int x=0;x < 4;++x){
        start_dsp_chanel(x);
    }
    hwrite(0x2c,0x91,0x02);
    hwrite(0x2c,0x92,0x00);
    hwrite(0x2c,0x90,0x31);
    hwrite(0x2c,0x83,0x02);
    hwrite(0x2c,0x82,0xc3);
    hwrite(0x2c,0xff,0x04);
    hwrite(0x2c,0x7a,0x04);
    hwrite(0x2c,0x00,0x09);
    hwrite(0x2c,0x06,0x01);
    hwrite(0x2c,0x06,0x00);
    hwrite(0x2c,0x5a,0xff);
    hwrite(0x2c,0x5b,0x22);
    hwrite(0x2c,0x5c,0x22);
    hwrite(0x2c,0x5d,0x2d);
    hwrite(0x2c,0x69,0x02);
    hwrite(0x2c,0x0d,0x7f);
    hwrite(0x2c,0x0c,0x73);
    hwrite(0x2c,0x0e,0x08);
    hwrite(0x2c,0x32,0x21);
    hwrite(0x2c,0x20,0x00);
    hwrite(0x2c,0x21,0x01);
    hwrite(0x2c,0x22,0x2);
    hwrite(0x2c,0x23,0x03);
    hwrite(0x2c,0x24,0x04);
    hwrite(0x2c,0x25,0x05);
    hwrite(0x2c,0x26,0x06);
    hwrite(0x2c,0x27,0x07);
    hwrite(0x2c,0x28,0x08);
    hwrite(0x2c,0x29,0x09);
    hwrite(0x2c,0x2a,0x0a);
    hwrite(0x2c,0x2b,0x0b);
    hwrite(0x2c,0x30,0x80);
    hwrite(0x2c,0x31,0x88);
    hwrite(0x2c,0x76,0x10);
    hwrite(0x2c,0xff,0x04);
    hwrite(0x2c,0x81,0x1f);

    hwrite(0x2c,0xff,0x00);
    hwrite(0x2d,0x00,0x00);
    hwrite(0x2c,0xff,0x01);
    hwrite(0x2d,0x00,0x00);
    hwrite(0x2c,0xff,0x02);
    hwrite(0x2d,0x00,0x00);
    hwrite(0x2c,0xff,0x03);
    hwrite(0x2d,0x00,0x00);

    hwrite(0x20,0x01,0x00);
    hwrite(0x20,0x02,0x00);
    hwrite(0x20,0x02,0x01);
    hwrite(0x20,0x02,0x00);
    hwrite(0x20,0x02,0x01);

    hwrite(0x20,0x01,0x00);
    hwrite(0x20,0x02,0x00);
    hwrite(0x20,0x02,0x01);
    hwrite(0x20,0x02,0x00);
    hwrite(0x20,0x02,0x01);

    hwrite(0x20,0x01,0x00);
    hwrite(0x20,0x02,0x00);
    hwrite(0x20,0x02,0x01);
    hwrite(0x20,0x02,0x00);
    hwrite(0x20,0x02,0x01);

    hwrite(0x20,0x01,0x00);
    hwrite(0x20,0x02,0x00);
    hwrite(0x20,0x02,0x01);
    hwrite(0x20,0x02,0x00);
    hwrite(0x20,0x02,0x01);

    hwrite(0x20,0x01,0x00);
    hwrite(0x20,0x02,0x00);
    hwrite(0x20,0x02,0x01);
    hwrite(0x20,0x02,0x00);
    hwrite(0x20,0x02,0x01);

    hwrite(0x20,0x01,0x00);
    hwrite(0x20,0x02,0x00);
    hwrite(0x20,0x02,0x01);
    hwrite(0x20,0x02,0x00);
    hwrite(0x20,0x02,0x01);



    hwrite(0x20,0x00,0x11);


    m_ftdi->ftdi_set_latency_timer(READ_SPEED);
    m_ftdi->ftdi_setflowctrl(SIO_RTS_CTS_HS);
}

void hUsbDeviceOperator::restart_capture()
{
    usleep(1000 * 1000);
    LOGE("restart_capture()\n");

    m_read_data_thread_isrun = true;
    pthread_t   rd;
    pthread_create(&rd,NULL,(void* (*)(void*))rethread_read,(void*)this);
}

void hUsbDeviceOperator::start_capture()
{
    usleep(1000 * 1000);
    m_read_data_thread_isrun = true;
    pthread_t   rd;
    pthread_create(&rd,NULL,(void* (*)(void*))thread_read,(void*)this);
}


void hUsbDeviceOperator::stop_capture()
{
//    m_ftdi->ftdi_usb_close();
    m_read_data_thread_isrun = m_work_data_thread_isrun = false;
}
void hUsbDeviceOperator::close_device()
{
    LOGE("husbdeviceoperator::close_device()==============================================\n");

    m_ftdi->ftdi_usb_close();
}
bool hUsbDeviceOperator::hwrite(unsigned char a1, unsigned char a2, unsigned char a3, unsigned char a4, unsigned char a5)
{
    usleep(10 * 1000);
    unsigned char buf[512];
    memset(buf,0,512);
    unsigned char p[] = {a1,a2,a3,a4,a5};
    unsigned short st = 0;
    m_ftdi->ftdi_read_data(buf,8);

    if(buf[2] != 0xFF){
        m_ftdi->ftdi_usb_purge_tx_buffer();
        m_ftdi->ftdi_usb_purge_rx_buffer();
        LOGE("clear buffer\n");

    }
    m_ftdi->ftdi_poll_modem_status(&st);

    unsigned char z1,z2;
    z1 = st>>8;
    z2 = st;

    if(z1 & 0xF0){
        if(z1 & 0x10){
            //Clear to send CTS
            //inactive
        }
        else{
            //active
        }
        if(z1 & 0x20){
            //Data set ready DTS
            //active
        }
        else{

        }
        if(z1 & 0x40){
            //Ring indicator RI
        }
        else{

        }
        if(z1 & 0x80){
            //Receive line signal detect
        }
        else{

        }

        if(z2 & 0x0){
            //Data ready DR
        }
        if(z2 & 0x2){
            //Overrun error
        }
        if(z2 & 0x4){
            //parity error
        }
        if(z2 & 0x8){
            //Framing error
        }
        if(z2 & 0x10){
            //break interrupt
        }
        if(z2 & 0x20){
            //Transmitter holding register
        }
        if(z2 & 0x40){
            //Transmitter empty
        }
        if(z2 & 0x80){
            //Error in RCVR FIFO
        }

    }



    if( 5 != m_ftdi->ftdi_write_data(p,5)){
        LOGE("write error write\n");

        return false;
    }
    int ret = m_ftdi->ftdi_read_data(buf,8);
    LOGE("read buf = %d\n",ret);

    if(ret == 8){
        if(buf[2] == 0xFF)
            return true;
        else{
            LOGE("write error return value\n");
            return true;
        }
    }

    return true;
}







hUsbDeviceOperator::error_code hUsbDeviceOperator::_restart()
{
    stop_capture();
    close_device();
    usleep(100 * 1000);
    if(!open_device())
        return no_device;
    start_dsp();
    start_capture();
    return ok;
}
hUsbDeviceOperator::error_code hUsbDeviceOperator::_start()
{
    if(m_ftdi == 0){
        m_ftdi = new hftdi();
    }
    if(m_ftdi->ftdi_usb_open() != 0){
        LOGE("open device error\n");

        return hUsbDeviceOperator::no_device;
    }
    if(0 !=m_ftdi->ftdi_usb_purge_rx_buffer()){
        LOGE("ftdi_usb_purge_rx_buffer error\n");

    }
    m_ftdi->ftdi_usb_purge_tx_buffer();
    if(0 !=m_ftdi->ftdi_set_latency_timer(READ_SPEED))
        return no_device;
    m_ftdi->ftdi_setflowctrl(SIO_RTS_CTS_HS);
    m_ftdi->ftdi_set_bitmode(0xFF,0x40);

    if(!hwrite(0x55,0xaa,0x20,0x30,0x00))
        return no_device;

    if(!hwrite(0x55,0xaa,0x20,0x00,0x10))
        return no_device;


   if(!hwrite(0x55,0xaa,0x21,0x30,0x00))
       return no_device;



        if(!hwrite(0x55,0xaa,0x2c,0xff,0x04))
            return no_device;



    if(!hwrite(0x55,0xaa,0x2d,0xfd,0x00))
        return no_device;



    if(!hwrite(0x55,0xaa,0x2c,0x80,0x31))
        return no_device;



    if(!hwrite(0x55,0xaa,0x20,0x32,0x00))
        return no_device;



    if(!hwrite(0x55,0xaa,0x20,0x32,0x01))
        return no_device;

    LOGE("start finish will _set_video()\n");

    for(int x=0;x<4;++x)
        _set_video(x);
    LOGE("set video finish\n");

    _start_dsp();
    LOGE("start dsp finish\n");

    usleep(10000);
    return ok;
}

void	hUsbDeviceOperator::_set_video(int p)
{
    hwrite(0x55,0xaa,0x2c,0xff,char(p));
    hwrite(0x55,0xaa,0x2c,0x02,0x91);
    hwrite(0x55,0xaa,0x2c,0xff,char(p));
    hwrite(0x55,0xaa,0x2c,0x01,0x14);
}
void hUsbDeviceOperator::_start_dsp()
{
    hwrite(0x55,0xaa,0x20,0x00,0x10);
    hwrite(0x55,0xaa,0x20,0x00,0x00);
    hwrite(0x55,0xaa,0x20,0x00,0x10);
    hwrite(0x55,0xaa,0x2c,0xd9,0xe0);

    LOGE("set_dsp 1 ----------------------------------------------------------------------------------------------\n");


    hwrite(0x55,0xaa,0x2c,0xff,0x00);
    hwrite(0x55,0xaa,0x2c,0x09,0x88);
    hwrite(0x55,0xaa,0x2c,0x0d,0x30);
    hwrite(0x55,0xaa,0x2c,0x0e,0xb8);
    hwrite(0x55,0xaa,0x2c,0x13,0x16);
    hwrite(0x55,0xaa,0x2c,0x17,0x0f);
    hwrite(0x55,0xaa,0x2c,0x2a,0x8f);
    hwrite(0x55,0xaa,0x2c,0x2c,0x60);
    hwrite(0x55,0xaa,0x2c,0x36,0x30);
    hwrite(0x55,0xaa,0x2c,0x37,0x02);
    hwrite(0x55,0xaa,0x2c,0x38,0x77);
    hwrite(0x55,0xaa,0x2c,0x1e,0x2a);
    hwrite(0x55,0xaa,0x2c,0x05,0x00);
    hwrite(0x55,0xaa,0x2c,0x07,0x22);
    hwrite(0x55,0xaa,0x2c,0x23,0x18);
    hwrite(0x55,0xaa,0x2c,0x24,0x38);
    hwrite(0x55,0xaa,0x2c,0x25,0x19);
    hwrite(0x55,0xaa,0x2c,0x26,0x37);
    hwrite(0x55,0xaa,0x2c,0x20,0xa4);
    hwrite(0x55,0xaa,0x2c,0x21,0x45);
    hwrite(0x55,0xaa,0x2c,0x22,0xae);
    hwrite(0x55,0xaa,0x2c,0x28,0x40);
    hwrite(0x55,0xaa,0x2c,0x50,0x00);
    hwrite(0x55,0xaa,0x2c,0x1a,0x83);
    hwrite(0x55,0xaa,0x2c,0x3a,0x28);
    hwrite(0x55,0xaa,0x2c,0x3b,0x10);
    hwrite(0x55,0xaa,0x2c,0x3c,0x80);
    hwrite(0x55,0xaa,0x2c,0x3d,0x80);
    hwrite(0x55,0xaa,0x2c,0x3f,0x20); //++

    LOGE("set_dsp 2 ----------------------------------------------------------------------------------------------\n");


    hwrite(0x55,0xaa,0x2c,0xff,0x01);
    hwrite(0x55,0xaa,0x2c,0x09,0x88);
    hwrite(0x55,0xaa,0x2c,0x0d,0x30);
    hwrite(0x55,0xaa,0x2c,0x0e,0xb8);
    hwrite(0x55,0xaa,0x2c,0x13,0x16);
    hwrite(0x55,0xaa,0x2c,0x17,0x0f);
    hwrite(0x55,0xaa,0x2c,0x2a,0x8f);
    hwrite(0x55,0xaa,0x2c,0x2c,0x60);
    hwrite(0x55,0xaa,0x2c,0x36,0x30);
    hwrite(0x55,0xaa,0x2c,0x37,0x02);
    hwrite(0x55,0xaa,0x2c,0x38,0x77);
    hwrite(0x55,0xaa,0x2c,0x1e,0x2a);
    hwrite(0x55,0xaa,0x2c,0x05,0x00);
    hwrite(0x55,0xaa,0x2c,0x07,0x22);
    hwrite(0x55,0xaa,0x2c,0x23,0x18);
    hwrite(0x55,0xaa,0x2c,0x24,0x38);
    hwrite(0x55,0xaa,0x2c,0x25,0x19);
    hwrite(0x55,0xaa,0x2c,0x26,0x37);
    hwrite(0x55,0xaa,0x2c,0x20,0xa4);
    hwrite(0x55,0xaa,0x2c,0x21,0x45);
    hwrite(0x55,0xaa,0x2c,0x22,0xae);
    hwrite(0x55,0xaa,0x2c,0x28,0x40);
    hwrite(0x55,0xaa,0x2c,0x50,0x00);
    hwrite(0x55,0xaa,0x2c,0x1a,0x83);
    hwrite(0x55,0xaa,0x2c,0x3a,0x28);
    hwrite(0x55,0xaa,0x2c,0x3b,0x10);
    hwrite(0x55,0xaa,0x2c,0x3c,0x80);
    hwrite(0x55,0xaa,0x2c,0x3d,0x80);
    hwrite(0x55,0xaa,0x2c,0x3f,0x21); //++

    LOGE("set_dsp 3 ----------------------------------------------------------------------------------------------\n");


    hwrite(0x55,0xaa,0x2c,0xff,0x02);
    hwrite(0x55,0xaa,0x2c,0x09,0x88);
    hwrite(0x55,0xaa,0x2c,0x0d,0x30);
    hwrite(0x55,0xaa,0x2c,0x0e,0xb8);
    hwrite(0x55,0xaa,0x2c,0x13,0x16);
    hwrite(0x55,0xaa,0x2c,0x17,0x0f);
    hwrite(0x55,0xaa,0x2c,0x2a,0x8f);
    hwrite(0x55,0xaa,0x2c,0x2c,0x60);
    hwrite(0x55,0xaa,0x2c,0x36,0x30);
    hwrite(0x55,0xaa,0x2c,0x37,0x02);
    hwrite(0x55,0xaa,0x2c,0x38,0x77);
    hwrite(0x55,0xaa,0x2c,0x1e,0x2a);
    hwrite(0x55,0xaa,0x2c,0x05,0x00);
    hwrite(0x55,0xaa,0x2c,0x07,0x22);
    hwrite(0x55,0xaa,0x2c,0x23,0x18);
    hwrite(0x55,0xaa,0x2c,0x24,0x38);
    hwrite(0x55,0xaa,0x2c,0x25,0x19);
    hwrite(0x55,0xaa,0x2c,0x26,0x37);
    hwrite(0x55,0xaa,0x2c,0x20,0xa4);
    hwrite(0x55,0xaa,0x2c,0x21,0x45);
    hwrite(0x55,0xaa,0x2c,0x22,0xae);
    hwrite(0x55,0xaa,0x2c,0x28,0x40);
    hwrite(0x55,0xaa,0x2c,0x50,0x00);
    hwrite(0x55,0xaa,0x2c,0x1a,0x83);
    hwrite(0x55,0xaa,0x2c,0x3a,0x28);
    hwrite(0x55,0xaa,0x2c,0x3b,0x10);
    hwrite(0x55,0xaa,0x2c,0x3c,0x80);
    hwrite(0x55,0xaa,0x2c,0x3d,0x80);
    hwrite(0x55,0xaa,0x2c,0x3f,0x22); //++

    LOGE("set_dsp 4 ----------------------------------------------------------------------------------------------\n");

    hwrite(0x55,0xaa,0x2c,0xff,0x03);
    hwrite(0x55,0xaa,0x2c,0x09,0x88);
    hwrite(0x55,0xaa,0x2c,0x0d,0x30);
    hwrite(0x55,0xaa,0x2c,0x0e,0xb8);
    hwrite(0x55,0xaa,0x2c,0x13,0x16);
    hwrite(0x55,0xaa,0x2c,0x17,0x0f);
    hwrite(0x55,0xaa,0x2c,0x2a,0x8f);
    hwrite(0x55,0xaa,0x2c,0x2c,0x60);
    hwrite(0x55,0xaa,0x2c,0x36,0x30);
    hwrite(0x55,0xaa,0x2c,0x37,0x02);
    hwrite(0x55,0xaa,0x2c,0x38,0x77);
    hwrite(0x55,0xaa,0x2c,0x1e,0x2a);
    hwrite(0x55,0xaa,0x2c,0x05,0x00);
    hwrite(0x55,0xaa,0x2c,0x07,0x22);
    hwrite(0x55,0xaa,0x2c,0x23,0x18);
    hwrite(0x55,0xaa,0x2c,0x24,0x38);
    hwrite(0x55,0xaa,0x2c,0x25,0x19);
    hwrite(0x55,0xaa,0x2c,0x26,0x37);
    hwrite(0x55,0xaa,0x2c,0x20,0xa4);
    hwrite(0x55,0xaa,0x2c,0x21,0x45);
    hwrite(0x55,0xaa,0x2c,0x22,0xae);
    hwrite(0x55,0xaa,0x2c,0x28,0x40);
    hwrite(0x55,0xaa,0x2c,0x50,0x00);
    hwrite(0x55,0xaa,0x2c,0x1a,0x83);
    hwrite(0x55,0xaa,0x2c,0x3a,0x28);
    hwrite(0x55,0xaa,0x2c,0x3b,0x10);
    hwrite(0x55,0xaa,0x2c,0x3c,0x80);
    hwrite(0x55,0xaa,0x2c,0x3d,0x80);
    hwrite(0x55,0xaa,0x2c,0x3f,0x23); //++

    LOGE("set_dsp 5 ----------------------------------------------------------------------------------------------\n");


//	hwrite(0x55,0xaa,0x2c,0xff,0x03);

    hwrite(0x55,0xaa,0x2c,0x91,0x02);
    hwrite(0x55,0xaa,0x2c,0x92,0x00);
    hwrite(0x55,0xaa,0x2c,0x90,0x31);
    hwrite(0x55,0xaa,0x2c,0x83,0x02);
    hwrite(0x55,0xaa,0x2c,0x82,0xc3);
    hwrite(0x55,0xaa,0x2c,0x91,0x02);
    hwrite(0x55,0xaa,0x2c,0xff,0x04);

    LOGE("set_dsp 6 ----------------------------------------------------------------------------------------------\n");



    hwrite(0x55,0xaa,0x2c,0x7a,0x04);
    hwrite(0x55,0xaa,0x2c,0x00,0x09);
    hwrite(0x55,0xaa,0x2c,0x06,0x01);
    hwrite(0x55,0xaa,0x2c,0x06,0x00);
    hwrite(0x55,0xaa,0x2c,0x5a,0xff);
    hwrite(0x55,0xaa,0x2c,0x5b,0x22);
    hwrite(0x55,0xaa,0x2c,0x5c,0x22);
    hwrite(0x55,0xaa,0x2c,0x5d,0x2d);
    hwrite(0x55,0xaa,0x2c,0x69,0x02);
    LOGE("set_dsp 7 ----------------------------------------------------------------------------------------------\n");


    hwrite(0x55,0xaa,0x2c,0x0d,0x7f);
    hwrite(0x55,0xaa,0x2c,0x0c,0x73);
    hwrite(0x55,0xaa,0x2c,0x0e,0x08);
    hwrite(0x55,0xaa,0x2c,0x32,0x21);

    LOGE("set_dsp 8 ----------------------------------------------------------------------------------------------\n");


    hwrite(0x55,0xaa,0x2c,0x20,0x00);
    hwrite(0x55,0xaa,0x2c,0x21,0x01);
    hwrite(0x55,0xaa,0x2c,0x22,0x02);
    hwrite(0x55,0xaa,0x2c,0x23,0x03);
    hwrite(0x55,0xaa,0x2c,0x24,0x04);
    hwrite(0x55,0xaa,0x2c,0x25,0x05);
    hwrite(0x55,0xaa,0x2c,0x26,0x06);
    hwrite(0x55,0xaa,0x2c,0x27,0x07);
    hwrite(0x55,0xaa,0x2c,0x28,0x08);
    hwrite(0x55,0xaa,0x2c,0x29,0x09);
    hwrite(0x55,0xaa,0x2c,0x2a,0x0a);
    hwrite(0x55,0xaa,0x2c,0x2b,0x0b);
    hwrite(0x55,0xaa,0x2c,0x30,0x80);
    hwrite(0x55,0xaa,0x2c,0x31,0x88);
    hwrite(0x55,0xaa,0x2c,0x76,0x10);
    hwrite(0x55,0xaa,0x2c,0xff,0x04);
    hwrite(0x55,0xaa,0x2c,0x81,0x1f);

    LOGE("set_dsp 9 ----------------------------------------------------------------------------------------------\n");


    hwrite(0x55,0xaa,0x2c,0xff,0x00);
    hwrite(0x55,0xaa,0x2d,0x00,0x00);
    hwrite(0x55,0xaa,0x2c,0xff,0x01);
    hwrite(0x55,0xaa,0x2d,0x00,0x00);
    hwrite(0x55,0xaa,0x2c,0xff,0x02);
    hwrite(0x55,0xaa,0x2d,0x00,0x00);
    hwrite(0x55,0xaa,0x2c,0xff,0x03);
    hwrite(0x55,0xaa,0x2d,0x00,0x00);

    LOGE("set_dsp 10 ----------------------------------------------------------------------------------------------\n");



    hwrite(0x55,0xaa,0x20,0x10,0x00);
    hwrite(0x55,0xaa,0x20,0x11,0x00);
    hwrite(0x55,0xaa,0x20,0x12,0x00);
    hwrite(0x55,0xaa,0x20,0x13,0x00);
    hwrite(0x55,0xaa,0x20,0x14,0x00);
    hwrite(0x55,0xaa,0x20,0x15,0x00);
    hwrite(0x55,0xaa,0x20,0x16,0x00);
    hwrite(0x55,0xaa,0x20,0x17,0x00);
    hwrite(0x55,0xaa,0x20,0x18,0x00);
    hwrite(0x55,0xaa,0x20,0x19,0x00);
    hwrite(0x55,0xaa,0x20,0x1a,0x00);
    hwrite(0x55,0xaa,0x20,0x1b,0x00);
    hwrite(0x55,0xaa,0x20,0x1c,0x00);
    hwrite(0x55,0xaa,0x20,0x1d,0x00);
    hwrite(0x55,0xaa,0x20,0x1e,0x00);
    hwrite(0x55,0xaa,0x20,0x1f,0x00);

    LOGE("set_dsp 11 ----------------------------------------------------------------------------------------------\n");


    hwrite(0x55,0xaa,0x20,0x01,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x01);
    hwrite(0x55,0xaa,0x20,0x02,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x01);
    hwrite(0x55,0xaa,0x20,0x01,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x01);
    hwrite(0x55,0xaa,0x20,0x02,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x01);
    hwrite(0x55,0xaa,0x20,0x01,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x01);
    hwrite(0x55,0xaa,0x20,0x02,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x01);
    hwrite(0x55,0xaa,0x20,0x01,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x01);
    hwrite(0x55,0xaa,0x20,0x02,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x01);

    LOGE("set_dsp 12 ----------------------------------------------------------------------------------------------\n");


    hwrite(0x55,0xaa,0x20,0x01,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x01);
    hwrite(0x55,0xaa,0x20,0x02,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x01);

    LOGE("set_dsp 13 ----------------------------------------------------------------------------------------------\n");


    hwrite(0x55,0xaa,0x20,0x01,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x01);
    hwrite(0x55,0xaa,0x20,0x02,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x01);

    LOGE("set_dsp 14 ----------------------------------------------------------------------------------------------\n");


    hwrite(0x55,0xaa,0x20,0x01,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x01);
    hwrite(0x55,0xaa,0x20,0x02,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x01);

    LOGE("set_dsp 15 ----------------------------------------------------------------------------------------------\n");



    hwrite(0x55,0xaa,0x20,0x01,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x01);
    hwrite(0x55,0xaa,0x20,0x02,0x00);
    hwrite(0x55,0xaa,0x20,0x02,0x01);

    LOGE("set_dsp 16 ----------------------------------------------------------------------------------------------\n");


    hwrite(0x55,0xaa,0x2c,0xff,0x00);
    hwrite(0x55,0xaa,0x2c,0x02,0x91);
    hwrite(0x55,0xaa,0x2c,0xff,0x00);

    LOGE("set_dsp 17 ----------------------------------------------------------------------------------------------\n");


    hwrite(0x55,0xaa,0x2c,0x01,0x14);
    hwrite(0x55,0xaa,0x2c,0xff,0x00);

    LOGE("set_dsp 18 ----------------------------------------------------------------------------------------------\n");


    hwrite(0x55,0xaa,0x2c,0x03,0x76);
    hwrite(0x55,0xaa,0x2c,0xff,0x00);

    LOGE("set_dsp 19 ----------------------------------------------------------------------------------------------\n");


    hwrite(0x55,0xaa,0x2c,0x04,0x80);

    hwrite(0x55,0xaa,0x20,0x02,0x00);
    hwrite(0x55,0xaa,0x2c,0xff,0x01);
    hwrite(0x55,0xaa,0x2c,0x02,0x91);
    hwrite(0x55,0xaa,0x2c,0xff,0x01);
    hwrite(0x55,0xaa,0x2c,0x01,0x14);
    hwrite(0x55,0xaa,0x2c,0xff,0x01);

    LOGE("set_dsp 20 ----------------------------------------------------------------------------------------------\n");


    hwrite(0x55,0xaa,0x2c,0x03,0x76);
    hwrite(0x55,0xaa,0x2c,0xff,0x01);
    hwrite(0x55,0xaa,0x2c,0x04,0x80);

    LOGE("set_dsp 21 ----------------------------------------------------------------------------------------------\n");


    hwrite(0x55,0xaa,0x20,0x02,0x01);
    hwrite(0x55,0xaa,0x2c,0xff,0x02);
    hwrite(0x55,0xaa,0x2c,0x02,0x01);
    hwrite(0x55,0xaa,0x2c,0xff,0x02);
    hwrite(0x55,0xaa,0x2c,0x01,0x14);
    hwrite(0x55,0xaa,0x2c,0xff,0x02);
    hwrite(0x55,0xaa,0x2c,0x03,0x76);
    hwrite(0x55,0xaa,0x2c,0xff,0x02);
    hwrite(0x55,0xaa,0x2c,0x04,0x80);

    LOGE("set_dsp 22 ----------------------------------------------------------------------------------------------\n");


    hwrite(0x55,0xaa,0x20,0x02,0x00);
    hwrite(0x55,0xaa,0x2c,0xff,0x03);
    hwrite(0x55,0xaa,0x2c,0x02,0x91);
    hwrite(0x55,0xaa,0x2c,0xff,0x03);
    hwrite(0x55,0xaa,0x2c,0x01,0x14);
    hwrite(0x55,0xaa,0x2c,0xff,0x03);
    hwrite(0x55,0xaa,0x2c,0x03,0x76);
    hwrite(0x55,0xaa,0x2c,0xff,0x03);

    LOGE("set_dsp 23 ----------------------------------------------------------------------------------------------\n");


    hwrite(0x55,0xaa,0x2c,0x04,0x80);
    hwrite(0x55,0xaa,0x20,0x02,0x01);
    hwrite(0x55,0xaa,0x20,0x00,0x11);

    LOGE("set_dsp 24 ----------------------------------------------------------------------------------------------\n");



    LOGE("---------------------------------------------------------------------------------------------------------\n");


    m_ftdi->ftdi_set_latency_timer(READ_SPEED);
    LOGE("set_latency_timer\n");

    m_ftdi->ftdi_setflowctrl(SIO_RTS_CTS_HS);
    LOGE("set_flowctrl\n");

    m_ftdi->ftdi_set_bitmode(0xFF,0x40);
}

void    hUsbDeviceOperator::start()
{
    if(m_ftdi->m_usb->is_running()){
        LOGE("quick_start()\n");

        quick_start();
    }else{
        LOGE("normal_start()\n");

        normal_start();
    }
}


void    hUsbDeviceOperator::normal_start()
{
    while(no_device == _start()){
        stop_capture();
        close_device();
        usleep(100 * 10000);
    }
    usleep(10 * 1000);
    LOGE("start device finish readey restart and capture device");
    _restart();
}

void    hUsbDeviceOperator::quick_start()
{
    if(!m_ftdi->m_usb->is_running()){
        return  ;
    }
    restart_capture();
}

void    fuck_start()
{
    LOGE("device_init");
    if(g_device == 0){
        LOGE("new husbdeviceoperator\n");
        g_device = new hUsbDeviceOperator();
        g_device->start();
    }
}

